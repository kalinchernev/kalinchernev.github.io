webpackJsonp([19613488350017],{551:function(n,s){n.exports={data:{markdownRemark:{frontmatter:{title:"Quality assurance in GatsbyJS projects - linting and testing",date:"2018-06-04T00:00:00.000Z",tags:["JAMStack","JavaScript","GatsbyJS","TDD"]},timeToRead:14,html:'<p>Although this article is meant to be an overview of several topics regarding quality assurance in GatsbyJS projects, same principles and tools apply to any professional JavaScript project.</p>\n<p>When a project grows, standards play bigger and more important role in ensuring problems remain manageable, i.e. the codebase of the given project remains sane to maintain. When applied and followed properly, standards facilitate developers\' cooperation and efficiency.</p>\n<p>Hopefully you already believe that QA is important, because this time I haven\'t gone too deep into explaining the <strong>why</strong>, but rather the <strong>how-with-what</strong>. The concepts you will learn here are common sense and are easy to follow and implement.</p>\n<p>My goal for you by the end of this article - you will not only understand what could be done to improve the quality of your project, but you will also act upon it, if you still haven\'t done so already.</p>\n<p>My main motivation to write the essay - share a point of view how JavaScript developers can add a sprinkle of QA automation to their projects in order to make their creations rock-solid useful for professional projects.</p>\n<p>And by developers I mean - open source contributors sharing their GatsbyJS starters, JavaScript developers sharing tools on npm and last, but not least, team members who want to raise the efficiency of their team in general.</p>\n<h2 id="the-story-behind"><a href="#the-story-behind" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The story behind</h2>\n<p>The first few days after the release of <a href="https://skl.sh/2HATDlg">Building a personal blog with Gatsby.js</a> were quite exciting because I received feedback which gave me perspectives I hadn\'t considered before talking about the topic.</p>\n<p>For example, a recurring subject of discussions is the comparison between GatsbyJS and popular CMS. Not so surprising - Drupal and WordPress also come to my mind when speaking site building. I can put myself into the perspective of looking at GatsbyJS from a new point of view sort-of comparing it to PHP CMS-s.</p>\n<p>What surprised me was the lack of opinionated quality assurance in community tools around GatsbyJS. When I was at the point of comparing plugins and themes I expected more-or-less equal quality coming from the JavaScript community.</p>\n<p>Why? Because there are many mature industry best practices when it comes to quality assurance in JavaScript projects.</p>\n<p><em>So coming back to the various points of view with valid questions ...</em></p>\n<p>A frequently asked question I get in many forms is whether GatsbyJS is as serious/mature product as WordPress and Drupal. Reality is that not only these products are incomparable in terms of features and main goal of existence, but also <a href="/learn-gatsbyjs">the main concepts of site building with these tools are completely different</a>. (<a href="/tags/jamstack">#JAMStack</a>)</p>\n<p>Still, I believe there are two main aspects by which GatsbyJS could be compared to popular CMS - the quality of the site\'s source code and the quality of the final build delivered to the end user.</p>\n<p>The quality of the final build delivered to the user is again a relatively controversial aspect to compare because of the difference in the way of thinking and tooling. Of course static sites will be faster, though there is much more to it which <a href="https://www.gatsbyjs.org/blog/2017-09-13-why-is-gatsby-so-fast/">CMS site builders don\'t even know</a>.</p>\n<p>For me, the quality of the source code is the universal factor to compare whether a given solution is serious/mature enough.</p>\n<blockquote>\n<p>If code isn\'t clean, it can bring a development organization to its knees. - Robert C. Martin</p>\n</blockquote>\n<p>Reality is, most of the developers won\'t go into the source code of the core system until they need to solve an unexpected problem.</p>\n<p>For this, communities are usually empowered to extend the core systems via plugins and themes.</p>\n<p><em>Which brought me to ...</em></p>\n<h3 id="researching-quality-standards-in-gatsbyjs-starters"><a href="#researching-quality-standards-in-gatsbyjs-starters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Researching quality standards in GatsbyJS starters</h3>\n<p>So, in order to be generally prepared to potential questions about "seriousness" of GatsbyJS in overall, I decided to have a look around popular GatsbyJS plugins and themes (starters) and research their quality standards.</p>\n<p>After opening the <a href="https://www.gatsbyjs.org/docs/gatsby-starters/">official starters</a> and a few community such, I realized that very few have integrated linting rules or tests. At best, just a few have <a href="https://prettier.io/">prettier</a> configuration file. Few days after my initial research, @kripod97 shared his <a href="https://twitter.com/kripod97/status/996408272579104768">starter with integrated quality tools</a>.</p>\n<p>Honestly, I have mixed feelings about this current state of GatsbyJS starters. On one side I\'m happy to see people paying attention of missing quality standards.</p>\n<p>But I don\'t like having bigger number of starters compared to less of a number and higher of a quality. Like, honestly, even in one of the most popular starters <a href="https://github.com/AustinGreen/gatsby-starter-netlify-cms">gatsby-starter-netlify-cms</a> there are no standards at the moment.</p>\n<p><em>Guess the most probable starting point for a PHP CMS developer to start evaluating GatsbyJS as an alternative ...</em></p>\n<p>What I\'m trying to point out here is that if GatsbyJS is to be taken seriously, the examples and starting points in the community should have better standards. And I\'m not saying the creators of the starters should always decide about the "first world problem" of trailing comma problem themselves, but at least provide defaults which are common sense.</p>\n<p>In worst case, the developer starting off from the given starter will have to set his preferred rules in an existing eslint configuration file or tweak plugins/extends. In best-case scenario, the developer will step on the solid tool chain, accept common-sense defaults and focus on creation part.</p>\n<p>At any case, a starting point of missing QA fundamentals is opening the door of bad practices, harder adoption and extension of starting code, <a href="https://en.wiktionary.org/wiki/bikeshedding">bikeshedding</a>, nitpicking and all other sorts of horrible things for which developers will blame JavaScript :)</p>\n<h2 id="qa-base"><a href="#qa-base" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>QA base</h2>\n<p>Fortunately for us, JavaScript developers, there are plenty of good and best practices and tools enforcing quality. Let\'s discuss few of them:</p>\n<ul>\n<li>Add default settings for your editor with <a href="https://editorconfig.org/">EditorConfig</a>.</li>\n<li>Automatic code formatting with <a href="https://prettier.io/">Prettier</a>.</li>\n<li>Static code analysis /linting/ with <a href="https://eslint.org/">ESlint</a>.</li>\n<li>Automated tests with Jest, unit and integration.</li>\n</ul>\n<p>Implementing some basic quality standards in your project will make your code base more maintainable and more accessible for others to join and help you when the project grows. Also you will save time and energy from no-always-necessary discussions about code and will be able to focus on what\'s important.</p>\n<h3 id="editorconfig"><a href="#editorconfig" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://editorconfig.org/">EditorConfig</a></h3>\n<p>This one is a low-hanging fruits you can implement super easily. Here\'s something you can paste in <code class="language-text">.editorconfig</code> in the root of your project:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false</code></pre>\n      </div>\n<p>With configurations like these, you ensure that the fundamental formatting rules are followed consistently regardless of the editor of choice.</p>\n<h3 id="prettier"><a href="#prettier" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prettier</h3>\n<p><a href="https://prettier.io/">Prettier</a> is a tool which helps you with automatic code formatting. If you haven\'t read the official documentation yet, you can read this <a href="https://swizec.com/blog/love-letter-prettier/swizec/7909">tutorial</a> which describes well the benefits of Prettier, in an informal and narrative way.</p>\n<p>Setting up this tool is easy:</p>\n<div class="gatsby-highlight" data-language="sh">\n      <pre class="language-sh"><code class="language-sh">$ yarn add -D -E prettier  </code></pre>\n      </div>\n<p>You can add an <a href="https://prettier.io/docs/en/editors.html">extension in your editor</a>. This is not a required step, but it will give you the benefits of the code formatting without hassle. Also, you can add a <a href="https://prettier.io/docs/en/precommit.html">precommit hook</a> or other means of CLI formatting code automatically.</p>\n<p>Lastly, if you still want to change defaults, <a href="https://prettier.io/docs/en/configuration.html">create a configuration file</a>, although <a href="https://prettier.io/docs/en/option-philosophy.html">options are limited for a reason</a>.</p>\n<h3 id="eslint"><a href="#eslint" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ESlint</h3>\n<p><a href="https://eslint.org/">ESlint</a> is naturally the tool to use in combination with Prettier. In fact, you can skip Prettier, but you shouldn\'t skip the linting part. ESlint gives you static code analysis which prevents you from making dummy mistakes which could be discovered even before executing a given piece of code.</p>\n<p>ESlint has a <a href="https://eslint.org/docs/3.0.0/user-guide/migrating-from-jscs#--fix"><code class="language-text">--fix</code> command</a> which acts similarly to Prettier when fixing formatting issues. However, ESlint has features for catching and fixing code quality issues as well, which are far move important to alleviate. If you come from PHP background, you can imagine ESlint as being <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP Codesniffer</a>.</p>\n<p>Before going into implementation details, make sure you either prepare your code repository or start off from an <a href="https://github.com/gatsbyjs/gatsby-starter-default">example repo which could be improved</a>, so that you learn the following concepts with practical experience.</p>\n<h4 id="install-dependencies"><a href="#install-dependencies" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install dependencies</h4>\n<div class="gatsby-highlight" data-language="sh">\n      <pre class="language-sh"><code class="language-sh">$ yarn add -D -E eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-prettier eslint-plugin-react</code></pre>\n      </div>\n<p>Adding so many packages surely looks scary, but don\'t worry - they are used in development phase only, they will by no means make your site bigger or slower.</p>\n<h4 id="configure-eslint"><a href="#configure-eslint" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Configure ESlint</h4>\n<p>To configure ESlint, create a file <strong>.eslintrc.json</strong> in the root folder of your project. Here\'s an example:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"airbnb"</span><span class="token punctuation">,</span> <span class="token string">"plugin:prettier/recommended"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"import/core-modules"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"gatsby"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"graphql"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"jsx-a11y/anchor-is-valid"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"error"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token property">"components"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Link"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"specialLink"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"to"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"aspects"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"noHref"</span><span class="token punctuation">,</span> <span class="token string">"invalidHref"</span><span class="token punctuation">,</span> <span class="token string">"preferButton"</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>These settings:</p>\n<ul>\n<li>Communicate that the configuration is located in the root folder of the project.</li>\n<li>Take recommended configurations for <a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb">airbnb</a> and <a href="https://github.com/prettier/eslint-config-prettier">prettier</a> presets, which saves time for a start.</li>\n<li>Communicate that <code class="language-text">gatsby</code> is a core module which could be imported without raising error flags unnecessarily.</li>\n<li>Communicate that <code class="language-text">graphql</code> is a global, because GatsbyJS makes it so.</li>\n<li>Include an example rule for the accessibility of the Link component.</li>\n</ul>\n<p>At this stage, you can already run <code class="language-text">npx eslint</code> to get feedback from the linter.</p>\n<p>Do not forget to add an <code class="language-text">.eslintignore</code> file with the following contents:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">node_modules\npublic</code></pre>\n      </div>\n<p>Where <code class="language-text">node_modules</code> you already know and <code class="language-text">public</code> is a folder created by GatsbyJS which contains generated code which doesn\'t need linting.</p>\n<p>Possible fine-touch would be to also install and use the <code class="language-text">gatsby-plugin-eslint</code> which will give you feedback about linting issues while developing your project.</p>\n<h4 id="understanding-eslint"><a href="#understanding-eslint" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Understanding ESlint</h4>\n<p>If you are interested into tweaking the recommended configurations from the previous point, knowing the following fundamentals will help you google your way through the right tweaks:</p>\n<ul>\n<li><a href="https://eslint.org/docs/user-guide/configuring">Configuration files specify rules, environments and globals</a>.</li>\n<li><a href="https://eslint.org/docs/3.0.0/developer-guide/working-with-plugins">Plugins implement specifications about these rules, environments and globals</a>.</li>\n<li>Both configurations and plugins are shareable pieces of code which you can find on npm.</li>\n</ul>\n<p>In overall, plugins are collections of rules distributed as npm packages. Configs are presets of rules (either default or plugin based). Plugins can include shareable configs, however configs can’t include plugin rules. Plugins contain definitions for custom rules, and configs explain whether those rules should be enabled or disabled and how they should be configured.</p>\n<h3 id="tests"><a href="#tests" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tests</h3>\n<p>Automated tests could have many forms and goals. The most popular types are unit and functional tests. Unit tests are ensuring the quality of lower-level logic, whereas functional tests ensure a given application supports a given functionality on a higher-level, not necessarily knowing anything about the lower-level logic.</p>\n<p>In this section, I will focus on functional tests for GatsbyJS websites using <a href="https://facebook.github.io/jest/">Jest</a>. In a previous article I showed some <a href="/tdd-serverless-jest">example unit tests</a>. The main difference this time will come from the additional tool I\'ll add in the game called <a href="https://github.com/GoogleChrome/puppeteer">puppeteer</a>.</p>\n<p>Puppeteer is a tool which will enable you to click around your website in an automated way and validate a given set of functionalities work well as if you were clicking yourself manually.</p>\n<h4 id="installing-dependencies"><a href="#installing-dependencies" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installing dependencies</h4>\n<div class="gatsby-highlight" data-language="sh">\n      <pre class="language-sh"><code class="language-sh">$ yarn add -D -E jest jest-config puppeteer jest-puppeteer eslint-plugin-jest</code></pre>\n      </div>\n<p>Briefly:</p>\n<ul>\n<li>jest - core Jest</li>\n<li>jest-config - contains defaults we reuse in our project-specific jest configurations</li>\n<li>puppeteer - headless Chrome browser to do the clicking for you</li>\n<li>jest-puppeteer - integrates the puppeteer lower level APIs with Jest so that you can include puppeteer abstractions in your tests</li>\n<li>eslint-plugin-jest - sets new <a href="https://www.npmjs.com/package/eslint-plugin-jest#rules">ESlint rules</a> for your project</li>\n</ul>\n<h4 id="configuration"><a href="#configuration" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Configuration</h4>\n<p>Jest will be able to run tests by default without any configurations. In our concrete case, we use <code class="language-text">jest-puppeteer</code> and that\'s why we\'ll create <code class="language-text">jest.config.js</code> with the following contents:</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> defaults <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'jest-config\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  preset<span class="token punctuation">:</span> <span class="token string">\'jest-puppeteer\'</span><span class="token punctuation">,</span>\n  testPathIgnorePatterns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>defaults<span class="token punctuation">.</span>testPathIgnorePatterns<span class="token punctuation">,</span> <span class="token string">\'.cache\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  verbose<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In short, we add the <code class="language-text">.cache</code> folder generated by GatsbyJS in the list of ignored locations.</p>\n<p>Next, you can create also <code class="language-text">jest-puppeteer.config.js</code> which contains:</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  server<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    command<span class="token punctuation">:</span> <span class="token string">\'./node_modules/.bin/gatsby serve\'</span><span class="token punctuation">,</span>\n    port<span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This will start a GatsbyJS server on port <code class="language-text">9000</code> following this <a href="https://github.com/smooth-code/jest-puppeteer#start-a-server">useful feature</a> of <code class="language-text">jest-puppeteer</code>.</p>\n<h4 id="simple-test"><a href="#simple-test" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple test</h4>\n<p>In my case, I decided to start small and create <code class="language-text">test/homepage.spec.js</code> test file with the following:</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'puppeteer\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> port <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../jest-puppeteer.config\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>server<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> siteRoot <span class="token operator">=</span> <span class="token template-string"><span class="token string">`http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'Homepage\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> browser <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\n  <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    page<span class="token punctuation">.</span><span class="token function">emulate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      viewport<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        width<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">2400</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      userAgent<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>siteRoot<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Site title is visible\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">\'h1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$eval</span><span class="token punctuation">(</span><span class="token string">\'h1 a\'</span><span class="token punctuation">,</span> e <span class="token operator">=></span> e<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">\'Kalin Chernev\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Older blog posts are accessible\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// Yes, that\'s a very broad selector, test ids?</span>\n    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">\'#___gatsby\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$eval</span><span class="token punctuation">(</span><span class="token string">\'#___gatsby\'</span><span class="token punctuation">,</span> e <span class="token operator">=></span> e<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">\'Older posts\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>I think the code is self-explanatory, these are 2 basic assertions that the site title and pager are available.</p>\n<p>For more functionalities, familiarize yourself with the <a href="https://github.com/smooth-code/jest-puppeteer/blob/master/packages/expect-puppeteer/README.md#api">documentation</a>. Also, there are quite a few resources online already with more examples. I personally like some ideas from this <a href="https://ropig.com/blog/end-end-tests-dont-suck-puppeteer/">article</a>.</p>\n<h3 id="integrating-with-ci"><a href="#integrating-with-ci" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Integrating with CI</h3>\n<p>There are many free solutions for open source projects, as well as premium such for private projects, so again - I won\'t give too many opinions here, but simply share my own simplified setup.</p>\n<p>Here\'s what you can do with <a href="https://circleci.com/">CircleCI</a> for example:</p>\n<ul>\n<li>Create a new folder <code class="language-text">.circleci</code> .</li>\n<li>Create a new file <code class="language-text">setup_puppeteer.sh</code></li>\n<li>Create also <code class="language-text">config.yml</code></li>\n</ul>\n<p>Both files are obviously in the folder <code class="language-text">.circleci</code>.</p>\n<p>In the script file, you can use this example I copied myself from the internet:</p>\n<div class="gatsby-highlight" data-language="sh">\n      <pre class="language-sh"><code class="language-sh">#!/bin/bash\n\nsudo apt-get update\nsudo apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \\\n  libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \\\n  libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \\\n  libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \\\n  ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget</code></pre>\n      </div>\n<p>This is ensuring that the container used for the tests can provide the necessary dependencies for the headless browser.</p>\n<p>Whereas the yaml file could be:</p>\n<div class="gatsby-highlight" data-language="yaml">\n      <pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span>\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">build</span><span class="token punctuation">:</span>\n    <span class="token key atrule">docker</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> circleci/node<span class="token punctuation">:</span>carbon<span class="token punctuation">-</span>browsers\n    <span class="token key atrule">working_directory</span><span class="token punctuation">:</span> ~/repo\n\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">checkout</span><span class="token punctuation">:</span>\n          <span class="token key atrule">post</span><span class="token punctuation">:</span>\n          <span class="token punctuation">-</span> git checkout blog\n\n      <span class="token punctuation">-</span> <span class="token key atrule">restore_cache</span><span class="token punctuation">:</span>\n          <span class="token key atrule">keys</span><span class="token punctuation">:</span>\n          <span class="token punctuation">-</span> v1<span class="token punctuation">-</span>dependencies<span class="token punctuation">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span> checksum "package.json" <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token comment"># fallback to using the latest cache if no exact match is found</span>\n          <span class="token punctuation">-</span> v1<span class="token punctuation">-</span>dependencies<span class="token punctuation">-</span>\n\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span>\n          <span class="token key atrule">name</span><span class="token punctuation">:</span> Workaround for GoogleChrome/puppeteer<span class="token comment">#290</span>\n          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">\'sh .circleci/setup_puppeteer.sh\'</span>\n\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install\n\n      <span class="token punctuation">-</span> <span class="token key atrule">save_cache</span><span class="token punctuation">:</span>\n          <span class="token key atrule">paths</span><span class="token punctuation">:</span>\n            <span class="token punctuation">-</span> node_modules\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> v1<span class="token punctuation">-</span>dependencies<span class="token punctuation">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span> checksum "package.json" <span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn build\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn test</code></pre>\n      </div>\n<p>The interesting parts which are not necessarily obvious from the documentation are that <code class="language-text">carbon-browsers</code> <a href="https://circleci.com/docs/2.0/circleci-images/">image</a> is used and the script we created in the previous step is meant to be a temporary workaround.</p>\n<h3 id="revising-code-classlanguage-textpackagejsoncode"><a href="#revising-code-classlanguage-textpackagejsoncode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Revising <code class="language-text">package.json</code></h3>\n<p>To have a feeling of completeness, let\'s make a quick revision on the updates which happened in <code class="language-text">package.json</code>.</p>\n<p>Script tags:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  ...\n  <span class="token property">"lint:js"</span><span class="token operator">:</span> <span class="token string">"eslint \\"**/*.{js,jsx}\\""</span><span class="token punctuation">,</span>\n  <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"run-p lint:*"</span><span class="token punctuation">,</span>\n  <span class="token property">"precommit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span><span class="token punctuation">,</span>\n  <span class="token property">"test-write"</span><span class="token operator">:</span> <span class="token string">"jest --watch"</span><span class="token punctuation">,</span>\n  <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"run-p test:* -cn"</span><span class="token punctuation">,</span>\n  <span class="token property">"test:lint"</span><span class="token operator">:</span> <span class="token string">"npm run lint"</span><span class="token punctuation">,</span>\n  <span class="token property">"test:functional"</span><span class="token operator">:</span> <span class="token string">"jest"</span>\n  ...\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>All dependencies we need are in <code class="language-text">dev</code>:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    ...\n    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^4.9.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-config-airbnb"</span><span class="token operator">:</span> <span class="token string">"^16.1.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-config-prettier"</span><span class="token operator">:</span> <span class="token string">"^2.9.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-plugin-import"</span><span class="token operator">:</span> <span class="token string">"^2.12.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-plugin-jest"</span><span class="token operator">:</span> <span class="token string">"^21.15.2"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-plugin-jsx-a11y"</span><span class="token operator">:</span> <span class="token string">"^6.0.3"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-plugin-prettier"</span><span class="token operator">:</span> <span class="token string">"^2.6.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"eslint-plugin-react"</span><span class="token operator">:</span> <span class="token string">"^7.8.2"</span><span class="token punctuation">,</span>\n    <span class="token property">"gatsby-plugin-eslint"</span><span class="token operator">:</span> <span class="token string">"^1.0.3"</span><span class="token punctuation">,</span>\n    <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token string">"^23.0.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"jest-config"</span><span class="token operator">:</span> <span class="token string">"^23.0.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"jest-puppeteer"</span><span class="token operator">:</span> <span class="token string">"^3.0.1"</span><span class="token punctuation">,</span>\n    <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token string">"^7.1.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"^1.12.1"</span><span class="token punctuation">,</span>\n    <span class="token property">"puppeteer"</span><span class="token operator">:</span> <span class="token string">"^1.4.0"</span><span class="token punctuation">,</span>\n    ...\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>And last, but not least:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"*.{js,json,css,md}"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">,</span> <span class="token string">"git add"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>'
}},pathContext:{slug:"gatsbyjs-qa-linting-testing"}}}});
//# sourceMappingURL=path---gatsbyjs-qa-linting-testing-c9cc50bab6f5e9ae84d4.js.map