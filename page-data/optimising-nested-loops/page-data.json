{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/optimising-nested-loops","result":{"data":{"markdownRemark":{"id":"c5458af7-f6a5-54dc-a078-3cf365a0539d","html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>While upgrading a project from Gatsby.js v1 to v2, I had an opportunity to make use of some big O karate. I am neither a performance expert, nor an algorithms master by any means but I put some dry theory in practice and it’s worth sharing.</p>\n<h2 id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem</h2>\n<p>In the Gatsby.js project, there is a Gallery page based on <a href=\"https://github.com/neptunian/react-photo-gallery\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-photo-gallery</a>. The content of the page is managed through <a href=\"https://www.netlifycms.org/docs/widgets/#list\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Netlify CMS list widget</a> which creates a JSON file which holds a user-selected list of images to display in the gallery.</p>\n<p>In order to display optimised images within this user-managed gallery, the <a href=\"https://www.gatsbyjs.org/docs/gatsby-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">gatsby-image</code></a> tool-chain is used to integrate with the <a href=\"https://github.com/lovell/sharp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sharp library</a>. Because the image sourcing plugin adds a tiny surface of properties to the image nodes, it’s not possible to preprocess or query much information for images through the GraphQL layer in Gatsby.js in order to mark which images are user-selected before they are actually used in React components.</p>\n<p>The information for which images are to be displayed in the gallery are stored within 1 JSON file, whereas the actual information regarding the physical images is stored and accessed through Gatsby.js’s GraphQL layer build- and run-time.</p>\n<h2 id=\"data-structures\" style=\"position:relative;\"><a href=\"#data-structures\" aria-label=\"data structures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data structures</h2>\n<p>The file which holds the information about user-selected gallery images is managed by Netlify CMS in the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Images\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"image\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/img/_dsf0009.jpg\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"image\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/img/20181120-0953-dscf5407.jpg\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The list of sourced image nodes would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0266d313-813f-551c-b445-231c9385c493\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"fluid\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"sizes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(max-width: 720px) 100vw, 720px\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"srcSet\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/static/2c19df4bb3535e40ba3bca7f71c26c19/f836f/android1.jpg 200w,\\n/static/2c19df4bb3535e40ba3bca7f71c26c19/2244e/android1.jpg 400w,\\n/static/2c19df4bb3535e40ba3bca7f71c26c19/7d509/android1.jpg 720w\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"originalName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"android1.jpg\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"095760c9-9e89-5c77-ba92-0861e6b5227d\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"fluid\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"sizes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(max-width: 720px) 100vw, 720px\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"srcSet\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/static/6b99e8aaee720b42840376a2255392de/f836f/android2.jpg 200w,\\n/static/6b99e8aaee720b42840376a2255392de/2244e/android2.jpg 400w,\\n/static/6b99e8aaee720b42840376a2255392de/7d509/android2.jpg 720w\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"originalName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"android2.jpg\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Which comes from a query like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query GetStaticSharpImages {\n    allImageSharp {\n      edges {\n        node {\n          id\n          fluid {\n            sizes\n            srcSet\n            originalName\n          }\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Image id’s are kept mostly for demonstration purposes, but they are a <a href=\"https://www.gatsbyjs.org/docs/migrating-from-v1-to-v2/#dont-query-nodes-by-id\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">breaking change in Gatsby.js v2</a>.</p>\n<h2 id=\"quick-approach\" style=\"position:relative;\"><a href=\"#quick-approach\" aria-label=\"quick approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick approach</h2>\n<p>Given that <code class=\"language-text\">userSelectedImages</code> holds the value of <code class=\"language-text\">Images</code> of user-selected list of images and <code class=\"language-text\">nodes</code> holds query results, a quick approach to solving the problem could be:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">userSelectedImages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> originalName <span class=\"token operator\">=</span> <span class=\"token function\">getImageOriginalName</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> imageData <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fluid<span class=\"token punctuation\">.</span>originalName <span class=\"token operator\">===</span> originalName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">)</span> result1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We start the iteration from the use-selected list of images rather than the list of image nodes. For each selected item, we search for the first match of details regarding the image coming from the sourcing plugin.</p>\n<p>Another approach would be to iterate the list of nodes instead of the user-selected list. In both cases, time complexity is <code class=\"language-text\">O(N^2)</code> because on each iteration of the outer loop, the inner loop will be iterated as well.</p>\n<h2 id=\"reflecting-on-what-can-change-in-time\" style=\"position:relative;\"><a href=\"#reflecting-on-what-can-change-in-time\" aria-label=\"reflecting on what can change in time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflecting on what can change in time</h2>\n<p>When thinking which part of the code will grow in time, we find out that the list of nodes is the potential problematic part. It can grow in thousands because Netlify CMS stores all user-managed media in a single folder. Whereas, the list of user-selected images will remain less than a hundred.</p>\n<h2 id=\"improved-approach\" style=\"position:relative;\"><a href=\"#improved-approach\" aria-label=\"improved approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved approach</h2>\n<p>We need a way to convert <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Arrray.find</code></a> (O(N)) to O(1). JavaScript has <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">maps</a> since ES6. Maps can find elements immediately without iterating through the list of nodes.</p>\n<p>Let’s do some refactoring:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> nodesMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  nodesMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fluid<span class=\"token punctuation\">.</span>originalName<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuserSelectedImages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> originalName <span class=\"token operator\">=</span> <span class=\"token function\">getImageOriginalName</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> imageData <span class=\"token operator\">=</span> nodesMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>originalName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">)</span> result2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nothing major happens on first look: the items from the array of nodes are poured in a map, thus “caching” the list in 1 full iteration. This gives the opportunity to get full details of an image in O(1) with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Map.get()</a>.</p>\n<h2 id=\"results-comparison\" style=\"position:relative;\"><a href=\"#results-comparison\" aria-label=\"results comparison permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Results comparison</h2>\n<p>Using simple <code class=\"language-text\">console.time</code> and <code class=\"language-text\">timeEnd</code> around the 2 approaches with having 54 user-selected images and 163 sourced images, I got the following results:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">result1: 2.398ms\nresult2: 0.174ms</code></pre></div>\n<p>These are not scientific results and should not be taken too seriously.</p>\n<p>There are better ways to measure performance and there are many time-consuming operations which are not taken into considerations here: like the actual image processing from sharp library, the gatsby operations, etc. Also, results will surely vary from one machine and OS to another.</p>\n<p>The two approaches demonstrate how 1 full iteration with a map creation yields O(1) access to image details which saves considerable amount of time compared to <code class=\"language-text\">Array.find</code> O(N).</p>\n<p>Sample code can be found <a href=\"https://github.com/kalinchernev/kalinchernev.github.io/tree/blog/samples/optimise-iterations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>","fields":{"slug":"/posts/optimising-nested-loops//optimising-nested-loops","tagSlugs":["/tag/o/","/tag/javascript/","/tag/algorithms/"]},"frontmatter":{"date":"2020-03-22T00:00:00+00:00","description":"Small thoughts on big Os","tags":["O","JavaScript","Algorithms"],"title":"Optimising nested loops","socialImage":{"publicURL":"/static/0249a8579cfb4088acaf23fcac068444/defaultSocialImage.jpg"}}}},"pageContext":{"slug":"/posts/optimising-nested-loops//optimising-nested-loops"}},"staticQueryHashes":["251939775","2764776372","401334301"]}