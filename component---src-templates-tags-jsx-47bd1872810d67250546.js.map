{"version":3,"sources":["webpack:///./src/components/ListItemToPost.jsx","webpack:///./src/templates/tags.jsx","webpack:///./src/utils/tagsSorter.js","webpack:///./src/utils/getRandomKey.js","webpack:///./src/utils/slugify.js"],"names":["Post","tagItem","to","frontmatter","slug","title","TagList","sorted","list","listArray","Object","keys","forEach","item","push","map","tagRecord","length","sort","a","b","tagsSorter","className","tag","key","getRandomKey","slugify","TagsPageIndexTemplate","pathContext","posts","post","htmlAttributes","lang","charSet","name","content","ListItemToPost","Math","floor","random","module","exports","text","toString","toLowerCase","replace"],"mappings":"mNAUeA,EANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACX,4BACE,kBAAC,IAAD,CAAMC,GAAE,IAAMD,EAAQE,YAAYC,MAASH,EAAQE,YAAYE,SCK7DC,EAAU,SAAC,GAAc,IACvBC,ECZO,SAAAC,GACb,IAAMC,EAAY,GAiBlB,OAdAC,OAAOC,KAAKH,GAAMI,QAAQ,SAAAC,GACxBJ,EAAUK,KAAK,CAACD,EAAML,EAAKK,OAIVJ,EAAUM,IAAI,SAAAC,GAG/B,MAAO,CAFUA,EAAU,GACVA,EAAU,GAAGC,UAKNC,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,KDJnCE,CADa,EAAXb,MAGjB,OACE,wBAAIc,UAAU,kBACXf,EAAOQ,IAAI,SAAAQ,GAAG,OACb,wBAAIC,IAAKC,eACP,kBAAC,IAAD,CAAMvB,GAAE,SAAWwB,IAAQH,EAAI,KAAWA,EAAI,GAA9C,KAAqDA,EAAI,GAAzD,UA6DKI,UAtDe,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACvBC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,KAAMP,EAAQK,EAARL,IAErB,OAAIA,EAGA,6BACE,kBAAC,IAAD,CAAQQ,eAAgB,CAAEC,KAAK,OAC7B,0BAAMC,QAAQ,UACd,0BACEC,KAAK,WACLC,QAAQ,2DAEV,+BAAQZ,EAAR,qBAEF,4BAAKA,GACL,wBAAID,UAAU,cACXQ,EAAKf,IAAI,SAACd,EAASuB,GAAV,OACR,kBAACY,EAAD,CAAgBZ,IAAKC,YAAaD,GAAMvB,QAASA,OAGrD,kBAAC,IAAD,CAAMC,GAAG,SAAT,aAMJ,6BACE,kBAAC,IAAD,CAAQ6B,eAAgB,CAAEC,KAAK,OAC7B,0BAAMC,QAAQ,UACd,0BACEC,KAAK,WACLC,QAAQ,2DAEV,6DAEF,oCACA,kBAAC,EAAD,CAAS3B,KAAMqB,GAAS,Q,iCE9Df,sBAAMQ,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,Q,oCCE3DE,EAAOC,QAAU,SAAAC,GAAI,OACnBA,EACGC,WACAC,cACAC,QAAQ,OAAQ,KAChBA,QAAQ,YAAa,IACrBA,QAAQ,SAAU,KAClBA,QAAQ,MAAO,IACfA,QAAQ,MAAO","file":"component---src-templates-tags-jsx-47bd1872810d67250546.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\n\nconst Post = ({ tagItem }) => (\n  <li>\n    <Link to={`/${tagItem.frontmatter.slug}`}>{tagItem.frontmatter.title}</Link>\n  </li>\n);\n\nexport default Post;\n\nPost.propTypes = {\n  tagItem: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      tagItem: PropTypes.shape({\n        slug: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport Link from 'gatsby-link';\n\nimport getRandomKey from '../utils/getRandomKey';\nimport tagsSorter from '../utils/tagsSorter';\nimport slugify from '../utils/slugify';\n\nimport ListItemToPost from '../components/ListItemToPost';\n\nconst TagList = ({ list }) => {\n  const sorted = tagsSorter(list);\n\n  return (\n    <ul className=\"list list-wrap\">\n      {sorted.map(tag => (\n        <li key={getRandomKey()}>\n          <Link to={`/tags/${slugify(tag[0])}`}>{`${tag[0]} (${tag[1]})`}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst TagsPageIndexTemplate = ({ pathContext }) => {\n  const { posts, post, tag } = pathContext;\n\n  if (tag) {\n    // Single page for a tag.\n    return (\n      <div>\n        <Helmet htmlAttributes={{ lang: `en` }}>\n          <meta charSet=\"utf-8\" />\n          <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0 shrink-to-fit=no\"\n          />\n          <title>{tag} | Kalin Chernev</title>\n        </Helmet>\n        <h1>{tag}</h1>\n        <ul className=\"list-reset\">\n          {post.map((tagItem, key) => (\n            <ListItemToPost key={getRandomKey(key)} tagItem={tagItem} />\n          ))}\n        </ul>\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    );\n  }\n  // Overview page for tags.\n  return (\n    <div>\n      <Helmet htmlAttributes={{ lang: `en` }}>\n        <meta charSet=\"utf-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0 shrink-to-fit=no\"\n        />\n        <title>Blog tags | Kalin Chernev</title>\n      </Helmet>\n      <h1>Tags</h1>\n      <TagList list={posts || []} />\n    </div>\n  );\n};\n\nTagList.propTypes = {\n  list: PropTypes.shape({}).isRequired,\n};\n\nTagsPageIndexTemplate.propTypes = {\n  pathContext: PropTypes.shape({\n    posts: PropTypes.array,\n    post: PropTypes.array,\n    tag: PropTypes.string,\n  }).isRequired,\n};\n\nexport default TagsPageIndexTemplate;\n","export default list => {\n  const listArray = [];\n\n  // Turn the input into an array.\n  Object.keys(list).forEach(item => {\n    listArray.push([item, list[item]]);\n  });\n\n  // Transform the information to have the count we need.\n  const listMapped = listArray.map(tagRecord => {\n    const tagLabel = tagRecord[0];\n    const tagCount = tagRecord[1].length;\n    return [tagLabel, tagCount];\n  });\n\n  // Sort\n  const sorted = listMapped.sort((a, b) => b[1] - a[1]);\n\n  return sorted;\n};\n","export default () => Math.floor(Math.random() * Math.floor(1000));\n","/* eslint no-useless-escape: 0 */\n\nmodule.exports = text =>\n  text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, ''); // Trim - from end of text\n"],"sourceRoot":""}