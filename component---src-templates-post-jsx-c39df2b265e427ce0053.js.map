{"version":3,"sources":["webpack:///./src/components/Tag.jsx","webpack:///./src/components/PostMeta.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/utils/getRandomKey.js","webpack:///./src/utils/slugify.js","webpack:///./node_modules/dateformat/lib/dateformat.js"],"names":["Tag","tag","className","title","toLowerCase","to","slugify","PostMeta","post","timeToRead","frontmatter","date","tags","dateTime","dateFormat","map","key","getRandomKey","query","Post","data","markdownRemark","htmlAttributes","lang","charSet","name","content","dangerouslySetInnerHTML","__html","html","Math","floor","random","module","exports","text","toString","replace","global","token","timezone","timezoneClip","mask","utc","gmt","arguments","length","kindOf","test","undefined","Date","isNaN","TypeError","maskSlice","String","masks","slice","_","d","D","m","y","H","M","s","L","o","getTimezoneOffset","W","getWeek","N","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","t","timeNames","tt","T","TT","Z","match","pop","abs","S","val","len","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","weekDiff","dow","Array","isArray","call"],"mappings":"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","file":"component---src-templates-post-jsx-c39df2b265e427ce0053.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\nimport slugify from '../utils/slugify';\n\nconst Tag = ({ tag }) => (\n  <li className=\"post-tag\">\n    <Link\n      title={`Click here to see all posts about ${tag.toLowerCase()}`}\n      to={`/tags/${slugify(tag)}`}\n    >\n      #{tag}\n    </Link>\n  </li>\n);\n\nTag.propTypes = {\n  tag: PropTypes.string.isRequired,\n};\n\nexport default Tag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dateFormat from 'dateformat';\n\nimport getRandomKey from '../utils/getRandomKey';\n\nimport Tag from './Tag';\n\nconst PostMeta = ({ post }) => {\n  const { timeToRead } = post;\n  const { date, tags } = post.frontmatter;\n\n  return (\n    <>\n      <section className=\"post-meta\">\n        <time className=\"post-time\" dateTime={date}>\n          {dateFormat(date, `fullDate`)}\n        </time>\n        <ul className=\"post-tags\">\n          {tags.map(tag => (\n            <Tag key={getRandomKey()} tag={tag} />\n          ))}\n        </ul>\n      </section>\n      <div className=\"post-timeToRead\">\n        Approximately {timeToRead} minutes to read ...\n      </div>\n    </>\n  );\n};\n\nPostMeta.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string,\n      timeToRead: PropTypes.string,\n      tags: PropTypes.array,\n    }),\n  }).isRequired,\n};\n\nexport default PostMeta;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\n\nimport PostMeta from '../components/PostMeta';\n\nconst Post = ({ data }) => {\n  const post = data.markdownRemark;\n  return (\n    <>\n      <Helmet htmlAttributes={{ lang: 'en' }}>\n        <meta charSet=\"utf-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0 shrink-to-fit=no\"\n        />\n        <title>{post.frontmatter.title} | Kalin Chernev</title>\n      </Helmet>\n      <PostMeta post={post} />\n      <h1>{post.frontmatter.title}</h1>\n      <div\n        dangerouslySetInnerHTML={{\n          __html: post.html,\n        }}\n      />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query PostPage($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        title\n        date\n        tags\n      }\n      timeToRead\n      html\n    }\n  }\n`;\n\nPost.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n      html: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default Post;\n","export default () => Math.floor(Math.random() * Math.floor(1000));\n","/* eslint no-useless-escape: 0 */\n\nmodule.exports = text =>\n  text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, ''); // Trim - from end of text\n","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n(function (global) {\n  'use strict';\n\n  var dateFormat = function () {\n    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n    var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n    var timezoneClip = /[^-+\\dA-Z]/g; // Regexes and supporting functions are cached through closure\n\n    return function (date, mask, utc, gmt) {\n      // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n      if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n        mask = date;\n        date = undefined;\n      }\n\n      date = date || new Date();\n\n      if (!(date instanceof Date)) {\n        date = new Date(date);\n      }\n\n      if (isNaN(date)) {\n        throw TypeError('Invalid date');\n      }\n\n      mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']); // Allow setting the utc/gmt argument via the mask\n\n      var maskSlice = mask.slice(0, 4);\n\n      if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n        mask = mask.slice(4);\n        utc = true;\n\n        if (maskSlice === 'GMT:') {\n          gmt = true;\n        }\n      }\n\n      var _ = utc ? 'getUTC' : 'get';\n\n      var d = date[_ + 'Date']();\n\n      var D = date[_ + 'Day']();\n\n      var m = date[_ + 'Month']();\n\n      var y = date[_ + 'FullYear']();\n\n      var H = date[_ + 'Hours']();\n\n      var M = date[_ + 'Minutes']();\n\n      var s = date[_ + 'Seconds']();\n\n      var L = date[_ + 'Milliseconds']();\n\n      var o = utc ? 0 : date.getTimezoneOffset();\n      var W = getWeek(date);\n      var N = getDayOfWeek(date);\n      var flags = {\n        d: d,\n        dd: pad(d),\n        ddd: dateFormat.i18n.dayNames[D],\n        dddd: dateFormat.i18n.dayNames[D + 7],\n        m: m + 1,\n        mm: pad(m + 1),\n        mmm: dateFormat.i18n.monthNames[m],\n        mmmm: dateFormat.i18n.monthNames[m + 12],\n        yy: String(y).slice(2),\n        yyyy: y,\n        h: H % 12 || 12,\n        hh: pad(H % 12 || 12),\n        H: H,\n        HH: pad(H),\n        M: M,\n        MM: pad(M),\n        s: s,\n        ss: pad(s),\n        l: pad(L, 3),\n        L: pad(Math.round(L / 10)),\n        t: H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n        tt: H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n        T: H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n        TT: H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n        Z: gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n        o: (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n        S: ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n        W: W,\n        N: N\n      };\n      return mask.replace(token, function (match) {\n        if (match in flags) {\n          return flags[match];\n        }\n\n        return match.slice(1, match.length - 1);\n      });\n    };\n  }();\n\n  dateFormat.masks = {\n    'default': 'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate': 'm/d/yy',\n    'mediumDate': 'mmm d, yyyy',\n    'longDate': 'mmmm d, yyyy',\n    'fullDate': 'dddd, mmmm d, yyyy',\n    'shortTime': 'h:MM TT',\n    'mediumTime': 'h:MM:ss TT',\n    'longTime': 'h:MM:ss TT Z',\n    'isoDate': 'yyyy-mm-dd',\n    'isoTime': 'HH:MM:ss',\n    'isoDateTime': 'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime': 'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat': 'ddd, dd mmm yyyy HH:MM:ss Z'\n  }; // Internationalization strings\n\n  dateFormat.i18n = {\n    dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    monthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    timeNames: ['a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM']\n  };\n\n  function pad(val, len) {\n    val = String(val);\n    len = len || 2;\n\n    while (val.length < len) {\n      val = '0' + val;\n    }\n\n    return val;\n  }\n  /**\n   * Get the ISO 8601 week number\n   * Based on comments from\n   * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n   *\n   * @param  {Object} `date`\n   * @return {Number}\n   */\n\n\n  function getWeek(date) {\n    // Remove time components of date\n    var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate()); // Change date to Thursday same week\n\n    targetThursday.setDate(targetThursday.getDate() - (targetThursday.getDay() + 6) % 7 + 3); // Take January 4th as it is always in week 1 (see ISO 8601)\n\n    var firstThursday = new Date(targetThursday.getFullYear(), 0, 4); // Change date to Thursday same week\n\n    firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3); // Check if daylight-saving-time-switch occurred and correct for it\n\n    var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n    targetThursday.setHours(targetThursday.getHours() - ds); // Number of weeks between target Thursday and first Thursday\n\n    var weekDiff = (targetThursday - firstThursday) / (86400000 * 7);\n    return 1 + Math.floor(weekDiff);\n  }\n  /**\n   * Get ISO-8601 numeric representation of the day of the week\n   * 1 (for Monday) through 7 (for Sunday)\n   * \n   * @param  {Object} `date`\n   * @return {Number}\n   */\n\n\n  function getDayOfWeek(date) {\n    var dow = date.getDay();\n\n    if (dow === 0) {\n      dow = 7;\n    }\n\n    return dow;\n  }\n  /**\n   * kind-of shortcut\n   * @param  {*} val\n   * @return {String}\n   */\n\n\n  function kindOf(val) {\n    if (val === null) {\n      return 'null';\n    }\n\n    if (val === undefined) {\n      return 'undefined';\n    }\n\n    if (typeof val !== 'object') {\n      return typeof val;\n    }\n\n    if (Array.isArray(val)) {\n      return 'array';\n    }\n\n    return {}.toString.call(val).slice(8, -1).toLowerCase();\n  }\n\n  ;\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);"],"sourceRoot":""}